@page "/login"
@using Resursko.Domain.DTOs.Account
@inject NavigationManager NavManager;


@if (ShowAuthError)
{
    <div class="alert alert-danger" role="alert">
        <p>@Error</p>
    </div>
}
<section style="width:600px; margin: 0 auto;">
    <EditForm Model="_loginRequest" OnValidSubmit="ExecuteLogin">
        <DataAnnotationsValidator />
        <MudCard>
            <MudCardContent>
                <MudTextField Label="Email" @bind-Value="_loginRequest.Email"
                              For="@(() => _loginRequest.Email)" />

                <MudTextField Label="Password" @bind-Value="_loginRequest.Password"
                              For="@(() => _loginRequest.Password)" />
            </MudCardContent>
            <MudCardActions>
                <MudButton Disabled ="@_processing" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">
                    @if(_processing)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Processing</MudText>
                    }
                    else
                    {
                        <MudText Class="ms-2">Login</MudText>
                    }
                </MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
</section>


@code {
    private AccountLoginRequest _loginRequest = new AccountLoginRequest();
    public bool ShowAuthError { get; set; }
    private string? Error { get; set; }
    private bool _processing = false;

    public async Task ExecuteLogin()
    {
        ShowAuthError = false;
        _processing = true;
        var result = await AccountService.Login(_loginRequest);
        if (!result.IsSuccessful)
        {
            Error = result.ErrorMessage;
            ShowAuthError = true;
        }
        else
        {
            NavManager.NavigateTo("/");
        }
    }
}
